'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { 
  ChefHat, 
  Users, 
  Clock, 
  Award, 
  Heart,
  Phone,
  MessageCircle,
  CheckCircle,
  Star,
  Utensils,
  Home,
  Building,
  Crown
} from 'lucide-react';
import PageLayout from '@/components/layout/PageLayout';

export default function ServicesPageClient() {
  const [selectedServices, setSelectedServices] = useState<string[]>([]);
  const [eventSize, setEventSize] = useState<string>('');
  const [selectedDishes, setSelectedDishes] = useState<string[]>([]);
  const [customDishes, setCustomDishes] = useState('');
  const [eventDate, setEventDate] = useState('');
  const [eventType, setEventType] = useState('');
  const [additionalNotes, setAdditionalNotes] = useState('');
  const [contactName, setContactName] = useState('');
  const [contactPhone, setContactPhone] = useState('');

  const services = [
    {
      id: 'banquet',
      title: 'Banket T…ô≈ükili',
      icon: Crown,
      description: '10+ il t…ôcr√ºb…ô il…ô b√∂y√ºk banketl…ôr v…ô m…ôclisl…ôr',
      features: ['Tam menyu planlamasƒ±', 'Xidm…ôt hey…ôti', 'Professional servis', 'T…ôcr√ºb…ôli komanda']
    },
    {
      id: 'catering',
      title: 'Onsite Catering',
      icon: Utensils,
      description: 'Yerind…ô hazƒ±rlanan t…ôz…ô v…ô dadlƒ± yem…ôkl…ôr',
      features: ['M…ôkanda hazƒ±rlama', 'T…ôz…ô m…ôhsullar', 'Professional avadanlƒ±q', 'H…ôssas servis']
    },
    {
      id: 'home-service',
      title: 'Ev…ô Servis',
      icon: Home,
      description: 'Evinizin rahatlƒ±ƒüƒ±nda professional xidm…ôt',
      features: ['Evd…ô hazƒ±rlama', 'F…ôrdi yana≈üma', 'Ail…ô atmosferi', 'Keyfiyy…ôtli servis']
    },
    {
      id: 'corporate',
      title: 'Korporativ T…ôdbirl…ôr',
      icon: Building,
      description: '≈ûirk…ôt t…ôdbirl…ôri v…ô i≈ü yem…ôkl…ôri',
      features: ['Business lunch', '≈ûirk…ôt bayramlarƒ±', 'Konfrans yem…ôkl…ôri', 'VIP xidm…ôt']
    },
    {
      id: 'special-events',
      title: 'X√ºsusi T…ôdbirl…ôr',
      icon: Heart,
      description: 'Ni≈üan, ≈ü…ônlik v…ô ail…ô t…ôdbirl…ôri',
      features: ['Ni≈üan m…ôrasiml…ôri', 'Doƒüum g√ºnl…ôri', 'Ail…ô ≈ü…ônlikl…ôri', 'Milli bayramlar']
    },
    {
      id: 'masterclass',
      title: 'Master-klas',
      icon: ChefHat,
      description: 'A≈üpazlƒ±q s…ôn…ôtini √∂yr…ônin',
      features: ['F…ôrdi d…ôrsl…ôr', 'Qrup d…ôrsl…ôri', 'Resept payla≈üƒ±mƒ±', 'Praktik t…ôlim']
    }
  ];

  const eventSizes = [
    { value: '<50', label: '50-d…ôn az n…ôf…ôr', icon: 'üë•' },
    { value: '50-100', label: '50-100 n…ôf…ôr', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
    { value: '100-200', label: '100-200 n…ôf…ôr', icon: 'üèõÔ∏è' },
    { value: '200-300', label: '200-300 n…ôf…ôr', icon: 'üé™' },
    { value: '300+', label: '300+ n…ôf…ôr', icon: 'üèüÔ∏è' },
    { value: 'diger', label: 'Dig…ôr', icon: 'üìù' }
  ];

  const menuCategories = {
    plovlar: {
      title: 'Plovlar',
      icon: 'üçö',
      items: [
        { id: 'doseme-plov', name: 'D√∂≈ü…ôm…ô Plov', description: '∆èn…ôn…ôvi Az…ôrbaycan …ôr plov' },
        { id: 'shah-plov', name: '≈ûah Plov', description: 'X√ºsusi dadlar v…ô …ôdviyyatlarla' },
        { id: 'qiymeli-plov', name: 'Qiym…ôli Plov', description: '∆ètin l…ôzz…ôti il…ô z…ônginl…ô≈üdirilmi≈ü' },
        { id: 'sebzi-plov', name: 'S…ôbzi Plov', description: 'T…ôr…ôv…ôz v…ô otlarla t…ôbii dad' },
        { id: 'balqabaqli-plov', name: 'Balqabaqlƒ± Plov', description: 'Payƒ±z dadlarƒ± il…ô' },
        { id: 'cizda-plov', name: 'Cƒ±zda Plov', description: 'Qƒ±zardƒ±lmƒ±≈ü √ß√∂r…ôk il…ô' },
        { id: 'eristeli-plov', name: '∆èri≈üt…ôli Plov', description: 'ƒ∞nc…ô …ôri≈üt…ô …ôlav…ôsi il…ô' },
        { id: 'paxla-plov', name: 'Paxla Plov', description: 'Quru paxla v…ô …ôdviyyatlarla' }
      ]
    },
    etYemekleri: {
      title: '∆èt Yem…ôkl…ôri',
      icon: 'ü•©',
      items: [
        { id: 'bozbash', name: 'Bozba≈ü', description: '∆èn…ôn…ôvi …ôt ≈üorbasƒ±' },
        { id: 'buglama', name: 'Buƒülama', description: 'Buxarda bi≈üirilmi≈ü …ôt' },
        { id: 'piti', name: 'Piti', description: '≈ûu≈üa rayonunun m…ô≈ühur yem…ôyi' },
        { id: 'nar-qovurma', name: 'Nar Qovurma', description: 'Nar tur≈üusu il…ô' },
        { id: 'kufte-bozbash', name: 'K√ºft…ô Bozba≈ü', description: 'B√∂y√ºk k√∂ft…ôl…ôrl…ô' },
        { id: 'qaymaqli-qovurma', name: 'Qaymaqlƒ± Qovurma', description: 'Qaymaqlƒ± dadla' },
        { id: 'sebzi-qovurma', name: 'S…ôbzi Qovurma', description: 'T…ôr…ôv…ôzli qarƒ±≈üƒ±q' }
      ]
    },
    quruIsti: {
      title: 'Quru ƒ∞sti Yem…ôkl…ôr',
      icon: 'üç≤',
      items: [
        { id: 'yarpaq-dolmasi', name: 'Yarpaq Dolmasƒ±', description: '∆èsl Az…ôrbaycan l…ôzz…ôti' },
        { id: 'toyuq-cigirtmasi', name: 'Toyuq √áƒ±ƒüƒ±rtmasƒ±', description: 'Qƒ±zardƒ±lmƒ±≈ü toyuq …ôti' },
        { id: 'ciz-biz', name: 'Cƒ±z-bƒ±z', description: 'Qarƒ±≈üƒ±q …ôt v…ô t…ôr…ôv…ôz' }
      ]
    },
    xemirYemekleri: {
      title: 'X…ômir yem…ôkl…ôri',
      icon: 'ü•ü',
      items: [
        { id: 'manti', name: 'Mantƒ± (x√ºsusi metodla)', description: 'B√∂y√ºk mantƒ± √∂z √ºslubumuzla' },
        { id: 'dusbere', name: 'D√º≈üb…ôr…ô', description: 'Ki√ßik mantƒ± ≈üorba il…ô' },
        { id: 'xengel', name: 'X…ông…ôl', description: 'Yoƒüurt v…ô sarƒ±msaq il…ô' }
      ]
    },
    duruYemekler: {
      title: 'Duru Yem…ôkl…ôr',
      icon: 'üçú',
      items: [
        { id: 'dovga', name: 'Dovƒüa', description: 'Yoƒüurt v…ô otlarla' },
        { id: 'shorba-novleri', name: '≈ûorba n√∂vl…ôri', description: 'M√ºxt…ôlif ≈üorba variantlarƒ±' },
        { id: 'siyiq-novleri', name: 'Sƒ±yƒ±q N√∂vl…ôri', description: 'T…ôr…ôv…ôz ≈üorbalarƒ±' }
      ]
    }
  };

  const handleServiceToggle = (serviceId: string) => {
    setSelectedServices(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    );
  };

  const handleDishToggle = (dishId: string) => {
    setSelectedDishes(prev => 
      prev.includes(dishId) 
        ? prev.filter(id => id !== dishId)
        : [...prev, dishId]
    );
  };

  const generateWhatsAppMessage = () => {
    const selectedServiceNames = services
      .filter(service => selectedServices.includes(service.id))
      .map(service => service.title)
      .join(', ');

    const selectedDishNames = Object.values(menuCategories)
      .flatMap(category => category.items)
      .filter(item => selectedDishes.includes(item.id))
      .map(item => item.name)
      .join(', ');

    let message = `üçΩÔ∏è *Chef ƒ∞lham…ô Xidm…ôt T…ôl…ôbi*\n\n`;
    message += `üë§ *Ad:* ${contactName}\n`;
    message += `üìû *Telefon:* ${contactPhone}\n\n`;
    message += `üéØ *Se√ßilmi≈ü Xidm…ôtl…ôr:*\n${selectedServiceNames}\n\n`;
    message += `üë• *T…ôdbir √ñl√ß√ºs√º:* ${eventSize}\n`;
    if (eventDate) message += `üìÖ *T…ôdbir Tarixi:* ${eventDate}\n`;
    if (eventType) message += `üéâ *T…ôdbir N√∂v√º:* ${eventType}\n\n`;
    
    if (selectedDishNames) {
      message += `üç¥ *Se√ßilmi≈ü Yem…ôkl…ôr:*\n${selectedDishNames}\n\n`;
    }
    
    if (customDishes) {
      message += `üìù *X√ºsusi Yem…ôkl…ôr:*\n${customDishes}\n\n`;
    }
    
    if (additionalNotes) {
      message += `üí≠ *∆èlav…ô Qeydl…ôr:*\n${additionalNotes}\n\n`;
    }
    
    message += `Xahi≈ü edir…ôm m…ôniml…ô …ôlaq…ô saxlayƒ±n. T…ô≈ü…ôkk√ºr edir…ôm! üôè`;

    const encodedMessage = encodeURIComponent(message);
    const whatsappUrl = `https://wa.me/994103794577?text=${encodedMessage}`;
    window.open(whatsappUrl, '_blank');
  };

  const isFormValid = () => {
    return contactName && contactPhone && selectedServices.length > 0 && eventSize;
  };

  return (
    <PageLayout>
      <div className="min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-yellow-50">
        {/* Hero Section */}
        <section className="relative py-20 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-r from-red-600/20 to-orange-600/20" />
          <div className="container mx-auto px-4 relative z-10">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="text-center mb-16"
            >
              <div className="flex justify-center items-center mb-6">
                <ChefHat className="h-16 w-16 text-red-600 mr-4" />
                <Award className="h-12 w-12 text-orange-500" />
              </div>
              <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
                Professional <span className="text-red-600">Catering</span> Xidm…ôtl…ôri
              </h1>
              <p className="text-xl md:text-2xl text-gray-700 mb-8 max-w-4xl mx-auto">
                10+ il banket v…ô m…ôclis t…ôcr√ºb…ôsi ‚Ä¢ Freelance a≈üpaz v…ô onsite catering ‚Ä¢ 
                Banket, ni≈üan, ≈ü…ônlik, korporativ t…ôdbirl…ôr ‚Ä¢ F…ôrdi menyu, dietik v…ô halal se√ßiml…ôr ‚Ä¢ 
                Ev…ô servis, master-klas v…ô reseptl…ôr
              </p>
              <div className="flex flex-wrap justify-center items-center gap-4 text-lg">
                <Badge variant="secondary" className="px-4 py-2">
                  <Clock className="h-4 w-4 mr-2" />
                  10+ ƒ∞l T…ôcr√ºb…ô
                </Badge>
                <Badge variant="secondary" className="px-4 py-2">
                  <Users className="h-4 w-4 mr-2" />
                  1000+ M√º≈üt…ôri
                </Badge>
                <Badge variant="secondary" className="px-4 py-2">
                  <Star className="h-4 w-4 mr-2" />
                  Premium Keyfiyy…ôt
                </Badge>
              </div>
            </motion.div>
          </div>
        </section>

        {/* Services Selection */}
        <section className="py-16 bg-white">
          <div className="container mx-auto px-4">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="text-center mb-12"
            >
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                Xidm…ôt N√∂vl…ôrimiz
              </h2>
              <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                Ehtiyacƒ±nƒ±za uyƒüun xidm…ôt n√∂v√ºn√º se√ßin v…ô biz siz…ô …ôn yax≈üƒ± h…ôlli t…ôklif ed…ôrik
              </p>
            </motion.div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
              {services.map((service, index) => (
                <motion.div
                  key={service.id}
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                >
                  <Card 
                    className={`cursor-pointer transition-all duration-300 hover:shadow-xl ${
                      selectedServices.includes(service.id) 
                        ? 'ring-2 ring-red-500 bg-red-50' 
                        : 'hover:shadow-lg'
                    }`}
                    onClick={() => handleServiceToggle(service.id)}
                  >
                    <CardHeader className="text-center">
                      <div className="flex justify-center mb-4">
                        <service.icon className={`h-12 w-12 ${
                          selectedServices.includes(service.id) ? 'text-red-600' : 'text-orange-500'
                        }`} />
                      </div>
                      <CardTitle className="text-xl mb-2">{service.title}</CardTitle>
                      <p className="text-gray-600 text-sm">{service.description}</p>
                    </CardHeader>
                    <CardContent>
                      <ul className="space-y-2">
                        {service.features.map((feature, idx) => (
                          <li key={idx} className="flex items-center text-sm text-gray-700">
                            <CheckCircle className="h-4 w-4 text-green-500 mr-2 flex-shrink-0" />
                            {feature}
                          </li>
                        ))}
                      </ul>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* Event Size Selection */}
        <section className="py-16 bg-gray-50">
          <div className="container mx-auto px-4">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="text-center mb-12"
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                T…ôdbir √ñl√ß√ºs√º
              </h2>
              <p className="text-lg text-gray-600">
                T…ôdbirin √∂l√ß√ºs√ºn√º se√ßin ki, siz…ô uyƒüun qiym…ôt v…ô xidm…ôt t…ôklif ed…ô bil…ôk
              </p>
            </motion.div>

            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
              {eventSizes.map((size, index) => (
                <motion.div
                  key={size.value}
                  initial={{ opacity: 0, scale: 0.9 }}
                  whileInView={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.4, delay: index * 0.1 }}
                >
                  <Card 
                    className={`cursor-pointer transition-all duration-300 text-center p-4 ${
                      eventSize === size.value 
                        ? 'ring-2 ring-red-500 bg-red-50' 
                        : 'hover:shadow-lg hover:scale-105'
                    }`}
                    onClick={() => setEventSize(size.value)}
                  >
                    <div className="text-3xl mb-2">{size.icon}</div>
                    <div className="font-semibold text-sm">{size.label}</div>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* Menu Selection */}
        <section className="py-16 bg-white">
          <div className="container mx-auto px-4">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="text-center mb-12"
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Menyu Se√ßimi
              </h2>
              <p className="text-lg text-gray-600">
                T…ôdbirin menyusunu t…ô≈ükil etm…ôk √º√ß√ºn sevdiyiniz yem…ôkl…ôri se√ßin
              </p>
            </motion.div>

            {Object.entries(menuCategories).map(([categoryKey, category], categoryIndex) => (
              <motion.div
                key={categoryKey}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: categoryIndex * 0.1 }}
                className="mb-12"
              >
                <h3 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                  <span className="text-3xl mr-3">{category.icon}</span>
                  {category.title}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  {category.items.map((item, itemIndex) => (
                    <motion.div
                      key={item.id}
                      initial={{ opacity: 0, scale: 0.9 }}
                      whileInView={{ opacity: 1, scale: 1 }}
                      transition={{ duration: 0.4, delay: itemIndex * 0.05 }}
                    >
                      <Card 
                        className={`cursor-pointer transition-all duration-300 h-full ${
                          selectedDishes.includes(item.id) 
                            ? 'ring-2 ring-red-500 bg-red-50' 
                            : 'hover:shadow-lg hover:scale-105'
                        }`}
                        onClick={() => handleDishToggle(item.id)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between mb-2">
                            <h4 className="font-semibold text-gray-900 flex-1">
                              {item.name}
                            </h4>
                            {selectedDishes.includes(item.id) && (
                              <CheckCircle className="h-5 w-5 text-red-500 flex-shrink-0 ml-2" />
                            )}
                          </div>
                          {item.description && (
                            <p className="text-sm text-gray-600">{item.description}</p>
                          )}
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            ))}

            {/* Custom Dishes */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="mt-12"
            >
              <Card className="p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-4">
                  X√ºsusi Yem…ôkl…ôr
                </h3>
                <p className="text-gray-600 mb-4">
                  Siyahƒ±da olmayan yem…ôkl…ôr ist…ôyirsinizs…ô, burada qeyd edin:
                </p>
                <Textarea
                  placeholder="M…ôs…ôl…ôn: X√ºsusi reseptl…ôr, dietik yem…ôkl…ôr, allergen olmayan variantlar..."
                  value={customDishes}
                  onChange={(e) => setCustomDishes(e.target.value)}
                  className="min-h-[100px]"
                />
              </Card>
            </motion.div>
          </div>
        </section>

        {/* Contact Form */}
        <section className="py-16 bg-gradient-to-br from-red-50 to-orange-50">
          <div className="container mx-auto px-4">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              className="max-w-2xl mx-auto"
            >
              <Card className="p-8">
                <CardHeader className="text-center pb-6">
                  <CardTitle className="text-2xl text-gray-900">
                    T…ôdbir M…ôlumatlarƒ±
                  </CardTitle>
                  <p className="text-gray-600">
                    Sizinl…ô …ôlaq…ô saxlamaq √º√ß√ºn m…ôlumatlarƒ± doldurun
                  </p>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Adƒ±nƒ±z *
                      </label>
                      <Input
                        placeholder="Adƒ±nƒ±zƒ± daxil edin"
                        value={contactName}
                        onChange={(e) => setContactName(e.target.value)}
                        required
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Telefon n√∂mr…ôsi *
                      </label>
                      <Input
                        placeholder="+994 XX XXX XX XX"
                        value={contactPhone}
                        onChange={(e) => setContactPhone(e.target.value)}
                        required
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        T…ôdbir tarixi
                      </label>
                      <Input
                        type="date"
                        value={eventDate}
                        onChange={(e) => setEventDate(e.target.value)}
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        T…ôdbir n√∂v√º
                      </label>
                      <Input
                        placeholder="M…ôs…ôl…ôn: Ni≈üan, toy, korporativ..."
                        value={eventType}
                        onChange={(e) => setEventType(e.target.value)}
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ∆èlav…ô qeydl…ôr
                    </label>
                    <Textarea
                      placeholder="X√ºsusi t…ôl…ôbl…ôr, alergiyl…ôr, dietik m…ôhdudiyy…ôtl…ôr v…ô s."
                      value={additionalNotes}
                      onChange={(e) => setAdditionalNotes(e.target.value)}
                      rows={4}
                    />
                  </div>

                  <div className="pt-6">
                    <Button
                      onClick={generateWhatsAppMessage}
                      disabled={!isFormValid()}
                      className="w-full bg-green-600 hover:bg-green-700 text-white py-3 text-lg"
                      size="lg"
                    >
                      <MessageCircle className="h-5 w-5 mr-2" />
                      WhatsApp il…ô Sifari≈ü Ver
                    </Button>
                    
                    {!isFormValid() && (
                      <p className="text-sm text-red-600 mt-2 text-center">
                        Xahi≈ü edirik, b√ºt√ºn vacib sah…ôl…ôri doldurun
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </section>

        {/* Contact Info */}
        <section className="py-12 bg-gray-900 text-white">
          <div className="container mx-auto px-4 text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <h3 className="text-2xl font-bold mb-4">Biziml…ô …ôlaq…ô</h3>
              <div className="flex flex-col md:flex-row justify-center items-center gap-6">
                <div className="flex items-center">
                  <Phone className="h-5 w-5 mr-2 text-green-400" />
                  <span className="text-lg">+994 10 379 45 77</span>
                </div>
                <div className="flex items-center">
                  <MessageCircle className="h-5 w-5 mr-2 text-green-400" />
                  <span>WhatsApp √ºz…ôrind…ôn sifari≈ü</span>
                </div>
                <div className="flex items-center">
                  <Clock className="h-5 w-5 mr-2 text-orange-400" />
                  <span>24/7 Xidm…ôt</span>
                </div>
              </div>
            </motion.div>
          </div>
        </section>
      </div>
    </PageLayout>
  );
}